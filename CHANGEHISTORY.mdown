# Tile5 Change History

## 0.9.5 (est mid Jan 2011)

The primary focus of the 0.9.5 release are changes to the interaction model for Tile5.  Presently, interaction (panning, pinch zoom, etc) are tightly coupled to a `T5.View` and it would be better to implement a more loosely coupled interaction system.

### Detailed Changes

- Breaking changes to `T5.Geo.Position` and `T5.Geo.BoundingBox` - see the API docs for more details.

- Transitioned away from using [ant](http://ant.apache.org/) for builds and a concatenation style, to using [sprockets](http://www.getsprockets.com/) instead.

- Interaction handlers decoupled from views and are now external drivers.  This creates opportunities for different interaction handlers and more automated testing opportunities.

## 0.9.4 (unstable tagged in Github 2010-12-30)

Some major rework of the handling of virtual display offsets in Tile5.  Previously a bit of double-handling was going on, however, this has been significantly improved.  Complete removal of the poi functionality as this is well handled through good marker management techniques so it's just
wasting space.

### Detailed Changes

- Updates to the way scaling and layer loads occur.  Scaling is not as "abrubt" as it was previously and a system similar to Polymaps and Google has been implemented to dynamically load tiles during the scaling operations once a power of 2 change has been detected.

- Major changes to the offset system

- Major changes to map provider implementation - now moved to a more generic "generator" implementation.

- Reimplemented clipping in a revised two-pass drawView implementation, first pass allows layers to contribute to a clipping rect, and the second pass does the actual draw.

- `T5.Geo.PointOfInterest` and `T5.Geo.POIStorage` removed. Not deprecated, just removed - apologies if anyone was using them, but if you were you really don't need to.  Additionally, the `pois` property of a `T5.Map` has been removed also.

- As promised, the `annotations` property of a `T5.Map` has also been removed in line with the deprecation in the 0.9.3 release.

- The `hitTest` method of a `T5.Annotation` separates the x and y coordinates into separate arguments to provide a small performance benefit.

- Internal rework of the `T5.Images` module to improve consistency of results.

- `T5.Marker` and `T5.ImageMarker` replace `T5.Annotation` and `T5.ImageAnnotation` respectively, however, the old classes are retained for backwards compatibility.  The new marker classes have a slightly different constructor taking the vector as the first argument and the params as the second.  Along with this change a new `move` method has been added to `T5.Marker` to allow moving the marker and having the display updated appropriately.

- __BREAKING CHANGE__ `T5.Marker.drawMarker` method now separates the `xy` parameter which used to be a `T5.Vector` into two separate parameters for performance reasons.  Will only cause you hassles if you have played with custom markers.

- `fps` initialization parameter added to the `T5.View` and by default this is set to 25 frames per second.

- Added support for setting tileBackground color for a map provider and having this carried through to the post processing for images as tiles are loaded.

- Implementation of GeoJSON improved to support parsing FeatureCollection types in addition to basic primitives.

- Added `T5.XY` module to take on the majority of the `T5.V` functions as it is more correct as we weren't really dealing with vectors but rather simple coordinates.  The sample logic has been applied in the geo space, and `T5.Geo.GeoXY` replaces the `T5.Geo.GeoVector` class.

- Added the ability to parse Point information from GeoJSON

- PINCH T5.ViewState renamed to ZOOM

- T5.Style module created to unify the various style functions (T5.applyStyle, T5.loadStyle, etc - now use T5.Style.apply, T5.Style.load, etc).

## 0.9.3 (released 2010-11-18)

Some pretty cool stuff in this, plus some pretty major refactoring on a few things.  Essentially functionality that required a `T5.Map` previously has been made to work with a `T5.View` or `T5.Tiler` wherever possible.  This includes paths and annotations.  Additionally, GeoJSON support is in the works and some early support of this can be used with Tile5, however, there is still probably more work to do in this area.

### Detailed Changes

- `T5.View` autoSize parameter now instructs the view to attempt to autosize to it's parent's width and height (which makes much more sense).

- `T5.Annotation` and `T5.ImageAnnotation` promoted out of the geo sections of Tile5 into the core library.

- `T5.MarkerLayer` created to replace `T5.Geo.UI.AnnotationsOverlay` and exposed through the `markers` property of a `T5.Map`.  Annotations property of the map still exists for the moment, but will be removed in 0.9.4

- `T5.PathLayer` introduced to provide a more generic abstraction for drawing paths.  `T5.Geo.UI.RouteOverlay` is now a very thin wrapper on top of a path layer.

- `T5.Poly` and `T5.PolyLayer` classes created.  These are used heavily in the implementation of the preliminary GeoJSON support.  Will possibly look at having the `T5.PathLayer` simply wrap a poly layer - not sure...

- Added some basic styling support through the `T5.Style` class.  Similar to [cartagen's](http://cartagen.org) GSS but without the ability to execute javascript as part of the styles.  Pure JSON, no executable code.

- Some refactoring of `T5.ViewLayer` to provide more conservative drawing for transparent layers.  This has included the inclusion of a `transparent` initialization parameter to indicate that a view layer is transparent.  A little ugly but necessary at the moment.

- Some other minor (and experimental) performance improvements, including clipping the canvas context to restrict the drawing area when only some tiles required drawing in a `T5.Tiler`

## 0.9.2 (released 2010-10-14)

Maintenance release - things changed under the hood but not a lot obvious at
the surface.

### Detailed Changes

- Changes to drawing logic to apply the canvas context `clip()` to restrict drawing area in each cycle
- Modifications to touch.js to reuse `T5.Vector` arrays rather than create new each time
- `T5.View` performance minor performance improvements
- touch.js modified to no longer raise `panInertia` events but rather `pan` events with an additional parameter indicating pan due to inertia
- Fixed [issue](http://github.com/sidelab/tile5/issues/closed#issue/32) with pins dropping on right click.  Touch events now ignore right button on mouse.
- Started making annotations more general so they can be applied without needing a `T5.map` (still in progress though).
- Added [MapBox](http://mapbox.com) map provider, see `tile5.mapbox.js`.

## 0.9.1 

Initial Release